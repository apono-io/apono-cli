/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourceFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceFilter{}

// ResourceFilter struct for ResourceFilter
type ResourceFilter struct {
	Type  ResourceFilterType `json:"type"`
	Value string             `json:"value"`
}

type _ResourceFilter ResourceFilter

// NewResourceFilter instantiates a new ResourceFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceFilter(type_ ResourceFilterType, value string) *ResourceFilter {
	this := ResourceFilter{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewResourceFilterWithDefaults instantiates a new ResourceFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceFilterWithDefaults() *ResourceFilter {
	this := ResourceFilter{}
	return &this
}

// GetType returns the Type field value
func (o *ResourceFilter) GetType() ResourceFilterType {
	if o == nil {
		var ret ResourceFilterType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResourceFilter) GetTypeOk() (*ResourceFilterType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResourceFilter) SetType(v ResourceFilterType) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *ResourceFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ResourceFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ResourceFilter) SetValue(v string) {
	o.Value = v
}

func (o ResourceFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *ResourceFilter) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceFilter := _ResourceFilter{}

	err = json.Unmarshal(bytes, &varResourceFilter)

	if err != nil {
		return err
	}

	*o = ResourceFilter(varResourceFilter)

	return err
}

type NullableResourceFilter struct {
	value *ResourceFilter
	isSet bool
}

func (v NullableResourceFilter) Get() *ResourceFilter {
	return v.value
}

func (v *NullableResourceFilter) Set(val *ResourceFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceFilter(val *ResourceFilter) *NullableResourceFilter {
	return &NullableResourceFilter{value: val, isSet: true}
}

func (v NullableResourceFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
