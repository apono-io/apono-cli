/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DryRunClientResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DryRunClientResponse{}

// DryRunClientResponse struct for DryRunClientResponse
type DryRunClientResponse struct {
	Status string                     `json:"status"`
	Errors []DryRunAccessRequestError `json:"errors"`
}

type _DryRunClientResponse DryRunClientResponse

// NewDryRunClientResponse instantiates a new DryRunClientResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDryRunClientResponse(status string, errors []DryRunAccessRequestError) *DryRunClientResponse {
	this := DryRunClientResponse{}
	this.Status = status
	this.Errors = errors
	return &this
}

// NewDryRunClientResponseWithDefaults instantiates a new DryRunClientResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDryRunClientResponseWithDefaults() *DryRunClientResponse {
	this := DryRunClientResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *DryRunClientResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DryRunClientResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DryRunClientResponse) SetStatus(v string) {
	o.Status = v
}

// GetErrors returns the Errors field value
func (o *DryRunClientResponse) GetErrors() []DryRunAccessRequestError {
	if o == nil {
		var ret []DryRunAccessRequestError
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *DryRunClientResponse) GetErrorsOk() ([]DryRunAccessRequestError, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *DryRunClientResponse) SetErrors(v []DryRunAccessRequestError) {
	o.Errors = v
}

func (o DryRunClientResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DryRunClientResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *DryRunClientResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDryRunClientResponse := _DryRunClientResponse{}

	err = json.Unmarshal(bytes, &varDryRunClientResponse)

	if err != nil {
		return err
	}

	*o = DryRunClientResponse(varDryRunClientResponse)

	return err
}

type NullableDryRunClientResponse struct {
	value *DryRunClientResponse
	isSet bool
}

func (v NullableDryRunClientResponse) Get() *DryRunClientResponse {
	return v.value
}

func (v *NullableDryRunClientResponse) Set(val *DryRunClientResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDryRunClientResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDryRunClientResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDryRunClientResponse(val *DryRunClientResponse) *NullableDryRunClientResponse {
	return &NullableDryRunClientResponse{value: val, isSet: true}
}

func (v NullableDryRunClientResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDryRunClientResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
