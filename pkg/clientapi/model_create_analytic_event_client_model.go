/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateAnalyticEventClientModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAnalyticEventClientModel{}

// CreateAnalyticEventClientModel struct for CreateAnalyticEventClientModel
type CreateAnalyticEventClientModel struct {
	EventName  string                        `json:"event_name"`
	ClientType AnalyticClientTypeClientModel `json:"client_type"`
	Properties map[string]interface{}        `json:"properties"`
}

type _CreateAnalyticEventClientModel CreateAnalyticEventClientModel

// NewCreateAnalyticEventClientModel instantiates a new CreateAnalyticEventClientModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAnalyticEventClientModel(eventName string, clientType AnalyticClientTypeClientModel, properties map[string]interface{}) *CreateAnalyticEventClientModel {
	this := CreateAnalyticEventClientModel{}
	this.EventName = eventName
	this.ClientType = clientType
	this.Properties = properties
	return &this
}

// NewCreateAnalyticEventClientModelWithDefaults instantiates a new CreateAnalyticEventClientModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAnalyticEventClientModelWithDefaults() *CreateAnalyticEventClientModel {
	this := CreateAnalyticEventClientModel{}
	return &this
}

// GetEventName returns the EventName field value
func (o *CreateAnalyticEventClientModel) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *CreateAnalyticEventClientModel) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *CreateAnalyticEventClientModel) SetEventName(v string) {
	o.EventName = v
}

// GetClientType returns the ClientType field value
func (o *CreateAnalyticEventClientModel) GetClientType() AnalyticClientTypeClientModel {
	if o == nil {
		var ret AnalyticClientTypeClientModel
		return ret
	}

	return o.ClientType
}

// GetClientTypeOk returns a tuple with the ClientType field value
// and a boolean to check if the value has been set.
func (o *CreateAnalyticEventClientModel) GetClientTypeOk() (*AnalyticClientTypeClientModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientType, true
}

// SetClientType sets field value
func (o *CreateAnalyticEventClientModel) SetClientType(v AnalyticClientTypeClientModel) {
	o.ClientType = v
}

// GetProperties returns the Properties field value
func (o *CreateAnalyticEventClientModel) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *CreateAnalyticEventClientModel) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *CreateAnalyticEventClientModel) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

func (o CreateAnalyticEventClientModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAnalyticEventClientModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_name"] = o.EventName
	toSerialize["client_type"] = o.ClientType
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

func (o *CreateAnalyticEventClientModel) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_name",
		"client_type",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAnalyticEventClientModel := _CreateAnalyticEventClientModel{}

	err = json.Unmarshal(bytes, &varCreateAnalyticEventClientModel)

	if err != nil {
		return err
	}

	*o = CreateAnalyticEventClientModel(varCreateAnalyticEventClientModel)

	return err
}

type NullableCreateAnalyticEventClientModel struct {
	value *CreateAnalyticEventClientModel
	isSet bool
}

func (v NullableCreateAnalyticEventClientModel) Get() *CreateAnalyticEventClientModel {
	return v.value
}

func (v *NullableCreateAnalyticEventClientModel) Set(val *CreateAnalyticEventClientModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAnalyticEventClientModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAnalyticEventClientModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAnalyticEventClientModel(val *CreateAnalyticEventClientModel) *NullableCreateAnalyticEventClientModel {
	return &NullableCreateAnalyticEventClientModel{value: val, isSet: true}
}

func (v NullableCreateAnalyticEventClientModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAnalyticEventClientModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
