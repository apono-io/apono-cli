/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// checks if the McpResponseError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McpResponseError{}

// McpResponseError struct for McpResponseError
type McpResponseError struct {
	Code    int32                  `json:"code"`
	Message string                 `json:"message"`
	Data    map[string]interface{} `json:"data"`
}

type _McpResponseError McpResponseError

// NewMcpResponseError instantiates a new McpResponseError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcpResponseError(code int32, message string, data map[string]interface{}) *McpResponseError {
	this := McpResponseError{}
	this.Code = code
	this.Message = message
	this.Data = data
	return &this
}

// NewMcpResponseErrorWithDefaults instantiates a new McpResponseError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcpResponseErrorWithDefaults() *McpResponseError {
	this := McpResponseError{}
	return &this
}

// GetCode returns the Code field value
func (o *McpResponseError) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *McpResponseError) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *McpResponseError) SetCode(v int32) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *McpResponseError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *McpResponseError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *McpResponseError) SetMessage(v string) {
	o.Message = v
}

// GetData returns the Data field value
func (o *McpResponseError) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *McpResponseError) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *McpResponseError) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o McpResponseError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McpResponseError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *McpResponseError) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMcpResponseError := _McpResponseError{}

	err = json.Unmarshal(bytes, &varMcpResponseError)

	if err != nil {
		return err
	}

	*o = McpResponseError(varMcpResponseError)

	return err
}

type NullableMcpResponseError struct {
	value *McpResponseError
	isSet bool
}

func (v NullableMcpResponseError) Get() *McpResponseError {
	return v.value
}

func (v *NullableMcpResponseError) Set(val *McpResponseError) {
	v.value = val
	v.isSet = true
}

func (v NullableMcpResponseError) IsSet() bool {
	return v.isSet
}

func (v *NullableMcpResponseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcpResponseError(val *McpResponseError) *NullableMcpResponseError {
	return &NullableMcpResponseError{value: val, isSet: true}
}

func (v NullableMcpResponseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcpResponseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
