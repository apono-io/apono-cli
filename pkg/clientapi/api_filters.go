/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// FiltersAPIService FiltersAPI service
type FiltersAPIService service

type ApiListIntegrationFilterOptionsRequest struct {
	ctx        context.Context
	ApiService *FiltersAPIService
	limit      *int32
	scope      *string
	skip       *int32
}

func (r ApiListIntegrationFilterOptionsRequest) Limit(limit int32) ApiListIntegrationFilterOptionsRequest {
	r.limit = &limit
	return r
}

func (r ApiListIntegrationFilterOptionsRequest) Scope(scope string) ApiListIntegrationFilterOptionsRequest {
	r.scope = &scope
	return r
}

func (r ApiListIntegrationFilterOptionsRequest) Skip(skip int32) ApiListIntegrationFilterOptionsRequest {
	r.skip = &skip
	return r
}

func (r ApiListIntegrationFilterOptionsRequest) Execute() (*PaginatedClientResponseModelIntegrationClientModel, *http.Response, error) {
	return r.ApiService.ListIntegrationFilterOptionsExecute(r)
}

/*
ListIntegrationFilterOptions List integration filters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListIntegrationFilterOptionsRequest
*/
func (a *FiltersAPIService) ListIntegrationFilterOptions(ctx context.Context) ApiListIntegrationFilterOptionsRequest {
	return ApiListIntegrationFilterOptionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedClientResponseModelIntegrationClientModel
func (a *FiltersAPIService) ListIntegrationFilterOptionsExecute(r ApiListIntegrationFilterOptionsRequest) (*PaginatedClientResponseModelIntegrationClientModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedClientResponseModelIntegrationClientModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FiltersAPIService.ListIntegrationFilterOptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/client/v1/filters/integrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "")
	} else {
		var defaultValue int32 = 0
		r.skip = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
