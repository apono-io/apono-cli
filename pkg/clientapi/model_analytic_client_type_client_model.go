/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// AnalyticClientTypeClientModel the model 'AnalyticClientTypeClientModel'
type AnalyticClientTypeClientModel string

// List of AnalyticClientTypeClientModel
const (
	ANALYTICCLIENTTYPECLIENTMODEL_CLI AnalyticClientTypeClientModel = "CLI"
)

// All allowed values of AnalyticClientTypeClientModel enum
var AllowedAnalyticClientTypeClientModelEnumValues = []AnalyticClientTypeClientModel{
	"CLI",
}

func (v *AnalyticClientTypeClientModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnalyticClientTypeClientModel(value)
	for _, existing := range AllowedAnalyticClientTypeClientModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnalyticClientTypeClientModel", value)
}

// NewAnalyticClientTypeClientModelFromValue returns a pointer to a valid AnalyticClientTypeClientModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnalyticClientTypeClientModelFromValue(v string) (*AnalyticClientTypeClientModel, error) {
	ev := AnalyticClientTypeClientModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnalyticClientTypeClientModel: valid values are %v", v, AllowedAnalyticClientTypeClientModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnalyticClientTypeClientModel) IsValid() bool {
	for _, existing := range AllowedAnalyticClientTypeClientModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnalyticClientTypeClientModel value
func (v AnalyticClientTypeClientModel) Ptr() *AnalyticClientTypeClientModel {
	return &v
}

type NullableAnalyticClientTypeClientModel struct {
	value *AnalyticClientTypeClientModel
	isSet bool
}

func (v NullableAnalyticClientTypeClientModel) Get() *AnalyticClientTypeClientModel {
	return v.value
}

func (v *NullableAnalyticClientTypeClientModel) Set(val *AnalyticClientTypeClientModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticClientTypeClientModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticClientTypeClientModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticClientTypeClientModel(val *AnalyticClientTypeClientModel) *NullableAnalyticClientTypeClientModel {
	return &NullableAnalyticClientTypeClientModel{value: val, isSet: true}
}

func (v NullableAnalyticClientTypeClientModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticClientTypeClientModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
