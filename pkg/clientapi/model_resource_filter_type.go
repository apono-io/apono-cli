/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// ResourceFilterType the model 'ResourceFilterType'
type ResourceFilterType string

// List of ResourceFilterType
const (
	RESOURCEFILTERTYPE_ID          ResourceFilterType = "id"
	RESOURCEFILTERTYPE_SEARCH_TERM ResourceFilterType = "search_term"
)

// All allowed values of ResourceFilterType enum
var AllowedResourceFilterTypeEnumValues = []ResourceFilterType{
	"id",
	"search_term",
}

func (v *ResourceFilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceFilterType(value)
	for _, existing := range AllowedResourceFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceFilterType", value)
}

// NewResourceFilterTypeFromValue returns a pointer to a valid ResourceFilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceFilterTypeFromValue(v string) (*ResourceFilterType, error) {
	ev := ResourceFilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceFilterType: valid values are %v", v, AllowedResourceFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceFilterType) IsValid() bool {
	for _, existing := range AllowedResourceFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceFilterType value
func (v ResourceFilterType) Ptr() *ResourceFilterType {
	return &v
}

type NullableResourceFilterType struct {
	value *ResourceFilterType
	isSet bool
}

func (v NullableResourceFilterType) Get() *ResourceFilterType {
	return v.value
}

func (v *NullableResourceFilterType) Set(val *ResourceFilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceFilterType(val *ResourceFilterType) *NullableResourceFilterType {
	return &NullableResourceFilterType{value: val, isSet: true}
}

func (v NullableResourceFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
