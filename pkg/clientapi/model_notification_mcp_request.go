/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NotificationMcpRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationMcpRequest{}

// NotificationMcpRequest struct for NotificationMcpRequest
type NotificationMcpRequest struct {
	Jsonrpc string                 `json:"jsonrpc"`
	Method  string                 `json:"method"`
	Params  map[string]interface{} `json:"params,omitempty"`
}

type _NotificationMcpRequest NotificationMcpRequest

// NewNotificationMcpRequest instantiates a new NotificationMcpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationMcpRequest(jsonrpc string, method string) *NotificationMcpRequest {
	this := NotificationMcpRequest{}
	this.Jsonrpc = jsonrpc
	this.Method = method
	return &this
}

// NewNotificationMcpRequestWithDefaults instantiates a new NotificationMcpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationMcpRequestWithDefaults() *NotificationMcpRequest {
	this := NotificationMcpRequest{}
	return &this
}

// GetJsonrpc returns the Jsonrpc field value
func (o *NotificationMcpRequest) GetJsonrpc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jsonrpc
}

// GetJsonrpcOk returns a tuple with the Jsonrpc field value
// and a boolean to check if the value has been set.
func (o *NotificationMcpRequest) GetJsonrpcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jsonrpc, true
}

// SetJsonrpc sets field value
func (o *NotificationMcpRequest) SetJsonrpc(v string) {
	o.Jsonrpc = v
}

// GetMethod returns the Method field value
func (o *NotificationMcpRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *NotificationMcpRequest) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *NotificationMcpRequest) SetMethod(v string) {
	o.Method = v
}

// GetParams returns the Params field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationMcpRequest) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationMcpRequest) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *NotificationMcpRequest) HasParams() bool {
	if o != nil && IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *NotificationMcpRequest) SetParams(v map[string]interface{}) {
	o.Params = v
}

func (o NotificationMcpRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationMcpRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jsonrpc"] = o.Jsonrpc
	toSerialize["method"] = o.Method
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

func (o *NotificationMcpRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jsonrpc",
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationMcpRequest := _NotificationMcpRequest{}

	err = json.Unmarshal(bytes, &varNotificationMcpRequest)

	if err != nil {
		return err
	}

	*o = NotificationMcpRequest(varNotificationMcpRequest)

	return err
}

type NullableNotificationMcpRequest struct {
	value *NotificationMcpRequest
	isSet bool
}

func (v NullableNotificationMcpRequest) Get() *NotificationMcpRequest {
	return v.value
}

func (v *NullableNotificationMcpRequest) Set(val *NotificationMcpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationMcpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationMcpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationMcpRequest(val *NotificationMcpRequest) *NullableNotificationMcpRequest {
	return &NullableNotificationMcpRequest{value: val, isSet: true}
}

func (v NullableNotificationMcpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationMcpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
