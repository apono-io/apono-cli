/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UserPersonalToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPersonalToken{}

// UserPersonalToken struct for UserPersonalToken
type UserPersonalToken struct {
	Id          string          `json:"id"`
	AccountId   string          `json:"account_id"`
	UserId      string          `json:"user_id"`
	Name        string          `json:"name"`
	MaskedToken string          `json:"masked_token"`
	ExpiryDate  NullableFloat64 `json:"expiry_date,omitempty"`
	CreatedDate float64         `json:"created_date"`
}

type _UserPersonalToken UserPersonalToken

// NewUserPersonalToken instantiates a new UserPersonalToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPersonalToken(id string, accountId string, userId string, name string, maskedToken string, createdDate float64) *UserPersonalToken {
	this := UserPersonalToken{}
	this.Id = id
	this.AccountId = accountId
	this.UserId = userId
	this.Name = name
	this.MaskedToken = maskedToken
	this.CreatedDate = createdDate
	return &this
}

// NewUserPersonalTokenWithDefaults instantiates a new UserPersonalToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPersonalTokenWithDefaults() *UserPersonalToken {
	this := UserPersonalToken{}
	return &this
}

// GetId returns the Id field value
func (o *UserPersonalToken) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserPersonalToken) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserPersonalToken) SetId(v string) {
	o.Id = v
}

// GetAccountId returns the AccountId field value
func (o *UserPersonalToken) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *UserPersonalToken) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *UserPersonalToken) SetAccountId(v string) {
	o.AccountId = v
}

// GetUserId returns the UserId field value
func (o *UserPersonalToken) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserPersonalToken) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserPersonalToken) SetUserId(v string) {
	o.UserId = v
}

// GetName returns the Name field value
func (o *UserPersonalToken) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserPersonalToken) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserPersonalToken) SetName(v string) {
	o.Name = v
}

// GetMaskedToken returns the MaskedToken field value
func (o *UserPersonalToken) GetMaskedToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaskedToken
}

// GetMaskedTokenOk returns a tuple with the MaskedToken field value
// and a boolean to check if the value has been set.
func (o *UserPersonalToken) GetMaskedTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaskedToken, true
}

// SetMaskedToken sets field value
func (o *UserPersonalToken) SetMaskedToken(v string) {
	o.MaskedToken = v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPersonalToken) GetExpiryDate() float64 {
	if o == nil || IsNil(o.ExpiryDate.Get()) {
		var ret float64
		return ret
	}
	return *o.ExpiryDate.Get()
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPersonalToken) GetExpiryDateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiryDate.Get(), o.ExpiryDate.IsSet()
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *UserPersonalToken) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate.IsSet() {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given NullableFloat64 and assigns it to the ExpiryDate field.
func (o *UserPersonalToken) SetExpiryDate(v float64) {
	o.ExpiryDate.Set(&v)
}

// SetExpiryDateNil sets the value for ExpiryDate to be an explicit nil
func (o *UserPersonalToken) SetExpiryDateNil() {
	o.ExpiryDate.Set(nil)
}

// UnsetExpiryDate ensures that no value is present for ExpiryDate, not even an explicit nil
func (o *UserPersonalToken) UnsetExpiryDate() {
	o.ExpiryDate.Unset()
}

// GetCreatedDate returns the CreatedDate field value
func (o *UserPersonalToken) GetCreatedDate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *UserPersonalToken) GetCreatedDateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *UserPersonalToken) SetCreatedDate(v float64) {
	o.CreatedDate = v
}

func (o UserPersonalToken) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPersonalToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["account_id"] = o.AccountId
	toSerialize["user_id"] = o.UserId
	toSerialize["name"] = o.Name
	toSerialize["masked_token"] = o.MaskedToken
	if o.ExpiryDate.IsSet() {
		toSerialize["expiry_date"] = o.ExpiryDate.Get()
	}
	toSerialize["created_date"] = o.CreatedDate
	return toSerialize, nil
}

func (o *UserPersonalToken) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"account_id",
		"user_id",
		"name",
		"masked_token",
		"created_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPersonalToken := _UserPersonalToken{}

	err = json.Unmarshal(bytes, &varUserPersonalToken)

	if err != nil {
		return err
	}

	*o = UserPersonalToken(varUserPersonalToken)

	return err
}

type NullableUserPersonalToken struct {
	value *UserPersonalToken
	isSet bool
}

func (v NullableUserPersonalToken) Get() *UserPersonalToken {
	return v.value
}

func (v *NullableUserPersonalToken) Set(val *UserPersonalToken) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPersonalToken) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPersonalToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPersonalToken(val *UserPersonalToken) *NullableUserPersonalToken {
	return &NullableUserPersonalToken{value: val, isSet: true}
}

func (v NullableUserPersonalToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPersonalToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
