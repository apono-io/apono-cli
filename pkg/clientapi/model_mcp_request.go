/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// McpRequest - struct for McpRequest
type McpRequest struct {
	NotificationMcpRequest *NotificationMcpRequest
	StandardMcpRequest     *StandardMcpRequest
}

// NotificationMcpRequestAsMcpRequest is a convenience function that returns NotificationMcpRequest wrapped in McpRequest
func NotificationMcpRequestAsMcpRequest(v *NotificationMcpRequest) McpRequest {
	return McpRequest{
		NotificationMcpRequest: v,
	}
}

// StandardMcpRequestAsMcpRequest is a convenience function that returns StandardMcpRequest wrapped in McpRequest
func StandardMcpRequestAsMcpRequest(v *StandardMcpRequest) McpRequest {
	return McpRequest{
		StandardMcpRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *McpRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NotificationMcpRequest
	err = newStrictDecoder(data).Decode(&dst.NotificationMcpRequest)
	if err == nil {
		jsonNotificationMcpRequest, _ := json.Marshal(dst.NotificationMcpRequest)
		if string(jsonNotificationMcpRequest) == "{}" { // empty struct
			dst.NotificationMcpRequest = nil
		} else {
			match++
		}
	} else {
		dst.NotificationMcpRequest = nil
	}

	// try to unmarshal data into StandardMcpRequest
	err = newStrictDecoder(data).Decode(&dst.StandardMcpRequest)
	if err == nil {
		jsonStandardMcpRequest, _ := json.Marshal(dst.StandardMcpRequest)
		if string(jsonStandardMcpRequest) == "{}" { // empty struct
			dst.StandardMcpRequest = nil
		} else {
			match++
		}
	} else {
		dst.StandardMcpRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NotificationMcpRequest = nil
		dst.StandardMcpRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(McpRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(McpRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src McpRequest) MarshalJSON() ([]byte, error) {
	if src.NotificationMcpRequest != nil {
		return json.Marshal(&src.NotificationMcpRequest)
	}

	if src.StandardMcpRequest != nil {
		return json.Marshal(&src.StandardMcpRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *McpRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.NotificationMcpRequest != nil {
		return obj.NotificationMcpRequest
	}

	if obj.StandardMcpRequest != nil {
		return obj.StandardMcpRequest
	}

	// all schemas are nil
	return nil
}

type NullableMcpRequest struct {
	value *McpRequest
	isSet bool
}

func (v NullableMcpRequest) Get() *McpRequest {
	return v.value
}

func (v *NullableMcpRequest) Set(val *McpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMcpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMcpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcpRequest(val *McpRequest) *NullableMcpRequest {
	return &NullableMcpRequest{value: val, isSet: true}
}

func (v NullableMcpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
