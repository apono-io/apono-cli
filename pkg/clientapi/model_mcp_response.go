/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// checks if the McpResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McpResponse{}

// McpResponse struct for McpResponse
type McpResponse struct {
	Jsonrpc string                   `json:"jsonrpc"`
	Id      string                   `json:"id"`
	Result  interface{}              `json:"result"`
	Error   NullableMcpResponseError `json:"error,omitempty"`
}

type _McpResponse McpResponse

// NewMcpResponse instantiates a new McpResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcpResponse(jsonrpc string, id string, result interface{}) *McpResponse {
	this := McpResponse{}
	this.Jsonrpc = jsonrpc
	this.Id = id
	this.Result = result
	return &this
}

// NewMcpResponseWithDefaults instantiates a new McpResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcpResponseWithDefaults() *McpResponse {
	this := McpResponse{}
	return &this
}

// GetJsonrpc returns the Jsonrpc field value
func (o *McpResponse) GetJsonrpc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jsonrpc
}

// GetJsonrpcOk returns a tuple with the Jsonrpc field value
// and a boolean to check if the value has been set.
func (o *McpResponse) GetJsonrpcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jsonrpc, true
}

// SetJsonrpc sets field value
func (o *McpResponse) SetJsonrpc(v string) {
	o.Jsonrpc = v
}

// GetId returns the Id field value
func (o *McpResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *McpResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *McpResponse) SetId(v string) {
	o.Id = v
}

// GetResult returns the Result field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *McpResponse) GetResult() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McpResponse) GetResultOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *McpResponse) SetResult(v interface{}) {
	o.Result = v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McpResponse) GetError() McpResponseError {
	if o == nil || IsNil(o.Error.Get()) {
		var ret McpResponseError
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McpResponse) GetErrorOk() (*McpResponseError, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *McpResponse) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableMcpResponseError and assigns it to the Error field.
func (o *McpResponse) SetError(v McpResponseError) {
	o.Error.Set(&v)
}

// SetErrorNil sets the value for Error to be an explicit nil
func (o *McpResponse) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *McpResponse) UnsetError() {
	o.Error.Unset()
}

func (o McpResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McpResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jsonrpc"] = o.Jsonrpc
	toSerialize["id"] = o.Id
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	return toSerialize, nil
}

func (o *McpResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jsonrpc",
		"id",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMcpResponse := _McpResponse{}

	err = json.Unmarshal(bytes, &varMcpResponse)

	if err != nil {
		return err
	}

	*o = McpResponse(varMcpResponse)

	return err
}

type NullableMcpResponse struct {
	value *McpResponse
	isSet bool
}

func (v NullableMcpResponse) Get() *McpResponse {
	return v.value
}

func (v *NullableMcpResponse) Set(val *McpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMcpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMcpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcpResponse(val *McpResponse) *NullableMcpResponse {
	return &NullableMcpResponse{value: val, isSet: true}
}

func (v NullableMcpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
