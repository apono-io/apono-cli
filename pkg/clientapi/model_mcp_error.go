/*
Apono

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clientapi

import (
	"encoding/json"
	"fmt"
)

// checks if the McpError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McpError{}

// McpError struct for McpError
type McpError struct {
	Code    int32       `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

type _McpError McpError

// NewMcpError instantiates a new McpError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcpError(code int32, message string, data interface{}) *McpError {
	this := McpError{}
	this.Code = code
	this.Message = message
	this.Data = data
	return &this
}

// NewMcpErrorWithDefaults instantiates a new McpError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcpErrorWithDefaults() *McpError {
	this := McpError{}
	return &this
}

// GetCode returns the Code field value
func (o *McpError) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *McpError) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *McpError) SetCode(v int32) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *McpError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *McpError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *McpError) SetMessage(v string) {
	o.Message = v
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *McpError) GetData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McpError) GetDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *McpError) SetData(v interface{}) {
	o.Data = v
}

func (o McpError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McpError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *McpError) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMcpError := _McpError{}

	err = json.Unmarshal(bytes, &varMcpError)

	if err != nil {
		return err
	}

	*o = McpError(varMcpError)

	return err
}

type NullableMcpError struct {
	value *McpError
	isSet bool
}

func (v NullableMcpError) Get() *McpError {
	return v.value
}

func (v *NullableMcpError) Set(val *McpError) {
	v.value = val
	v.isSet = true
}

func (v NullableMcpError) IsSet() bool {
	return v.isSet
}

func (v *NullableMcpError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcpError(val *McpError) *NullableMcpError {
	return &NullableMcpError{value: val, isSet: true}
}

func (v NullableMcpError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcpError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
